import os
import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart, CommandHelp, Command
from aiogram.types import InputFile

from loader import dp, bot
from utils.db_stuff.models import User, get_all_sections_questions_data, set_user_points, get_my_statistic
from utils.misc.user_inline_keyboards import *
from states.user_states import *
from utils.misc.radar_chart import *


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    bot_name = await dp.bot.get_me()
    user = message.from_user
    new_user = User.get_or_create(user_id=user.id, username=user.username)
    text = f'<b>{user.username}</b>, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n—ç—Ç–æ –±–æ—Ç, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω—ã–µ ' \
           f'–∑–∞–¥–∞—á–∏ –¥–ª—è —Å–≤–æ–µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä–æ—Å—Ç–∞ üí∞.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/test</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.'

    await message.answer(text)

    if type(new_user) != tuple:
        new_user.save()


@dp.message_handler(CommandHelp())
async def bot_help(message: types.Message):
    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ üìÉ:\n" \
           "/test - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏"

    await message.answer(text)


@dp.message_handler(Command('test'))
async def start_test(message: types.Message):
    await message.answer('<b>–¢–µ—Å—Ç –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ üìã:</b>', reply_markup=inline_test_panel)
    await Test.first()


@dp.callback_query_handler(text='start_test', state=Test.start)
async def start_questions(callback: types.CallbackQuery, state: FSMContext):
    questions_sections = get_all_sections_questions_data()

    async with state.proxy() as data:
        data['questions_sections'] = questions_sections
        data['current_question'] = 1
        data['current_section'] = 1

    question = questions_sections[1]['questions'][1]['question']

    await callback.message.edit_text(f'<b>–í–æ–ø—Ä–æ—Å 1:</b>\n\n{question}', reply_markup=inline_question_answer)
    await Test.next()


@dp.callback_query_handler(text_contains='answer', state=Test.question)
async def answer_question(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data.split(':')[-1]

    async with state.proxy() as data:
        question = data['questions_sections'][data['current_section']]['questions'][data['current_question']]

        if (answer == 'yes' and question['answer']) or (answer == 'no' and question['answer'] == False):
            data['questions_sections'][data['current_section']]['total_points'] += question['points']

        if list(data['questions_sections'][data['current_section']]['questions'].keys())[-1] == data['current_question']:
            data['current_section'] += 1

        data['current_question'] += 1

        if data['current_section'] not in list(data['questions_sections'].keys()):
            await callback.message.edit_text('<b>–í—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç, —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?</b>', reply_markup=inline_test_results)
            await Test.next()

        else:
            await callback.message.edit_text(f"<b>–í–æ–ø—Ä–æ—Å {data['current_question']}:</b>\n\n"
                                             f"{data['questions_sections'][data['current_section']]['questions'][data['current_question']]['question']}",
                                             reply_markup=inline_question_answer)


@dp.callback_query_handler(text='get_test_results', state=Test.results)
async def get_test_results(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sections = data['questions_sections']
    radar_chart = get_radar_chart(sections)
    total_points = 0
    results = ''

    for section_id, section in sections.items():
        total_points += section['total_points']
        results += f"<b>\"{section['section_name']}\"</b> - <b>{section['total_points']}</b> –∏–∑ <b>{section['all_points']}</b> –±–∞–ª–ª–æ–≤;\n"

    radar_chart.savefig(f'images/radar_chart{callback.from_user.id}.png')
    radar_chart_image = InputFile(f'images/radar_chart{callback.from_user.id}.png')

    await callback.message.delete()
    await bot.send_photo(callback.message.chat.id, radar_chart_image,
                         caption=f'<b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n</b>\n{results}\n–í—Å–µ–≥–æ –Ω–∞–±—Ä–∞–Ω–æ <b>{total_points}</b> –±–∞–ª–ª–æ–≤.\n\n'
                                 f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è —Å–µ–±—è 1 - 2 —Å–µ–∫—Ü–∏–∏ –∏–∑ –∫–æ–ª–µ—Å–∞ –±–∞–ª–∞–Ω—Å–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –Ω–∞–±—Ä–∞–ª–∏ –±–∞–ª–ª–æ–≤. '
                                 f'–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –Ω–∏–º–∏.\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–∏—Ç—É–∞—Ü–∏—è —É–ª—É—á—à–∏—Ç—å—Å—è –≤ —ç—Ç–∏—Ö '
                                 f'—Å–µ–∫—Ü–∏—è, –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ü–∏–∏ —Ç–æ–∂–µ –Ω–∞—á–Ω—É—Ç –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å—Å—è.\n\n–ü—Ä–æ–π–¥–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å üî•.')

    set_user_points(callback.from_user.id, total_points)

    await state.reset_data()
    await state.reset_state()

    os.remove(f'images/radar_chart{callback.from_user.id}.png')

    await asyncio.sleep(30)

    await callback.message.answer('<b>–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —ç—Ç–æ—Ç —Ç–µ—Å—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º üòâ</b>',
                                  reply_markup=inline_share_bot_link)


@dp.callback_query_handler(text='test_statistic', state=Test.start)
async def get_test_statistic(callback: types.CallbackQuery, state: FSMContext):
    statistic = get_my_statistic(callback.from_user.id)

    await callback.message.edit_text(statistic, reply_markup=inline_test_statistic)


@dp.callback_query_handler(text='exit_from_statistic', state=Test.start)
async def exit_from_test_statistic(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await start_test(callback.message)


@dp.callback_query_handler(text='exit_from_test', state=Test.start)
async def exit_from_test(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.reset_data()
    await state.reset_state()
